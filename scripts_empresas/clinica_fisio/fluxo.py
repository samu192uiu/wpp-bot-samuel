"""Fluxo simplificado para o prot√≥tipo da cl√≠nica de fisioterapia.

O objetivo √© demonstrar rapidamente como o bot atua nas quatro frentes
principais solicitadas pelo cliente:

1. Atendimento comercial
2. Agendamento / confirma√ß√£o / remarca√ß√£o
3. Pagamentos
4. Perguntas frequentes

A implementa√ß√£o mant√©m um estado m√≠nimo na mem√≥ria para coletar dados do
interessado durante o agendamento, mas evita integra√ß√µes externas para
facilitar a apresenta√ß√£o inicial do prot√≥tipo.
"""
from __future__ import annotations

import json
from pathlib import Path
from dataclasses import dataclass, field
from datetime import datetime
import re
from typing import Dict
from uuid import uuid4

from flask import jsonify

CONFIG_EMPRESAS: Dict[str, dict] = {}
ADMINS_EMPRESAS: Dict[str, list] = {}
try:
    CONFIG_EMPRESAS = json.loads(
        (Path(__file__).resolve().parents[2] / "config" / "empresas_config.json").read_text(encoding="utf-8")
    )
except FileNotFoundError:
    CONFIG_EMPRESAS = {}
except json.JSONDecodeError:
    CONFIG_EMPRESAS = {}

try:
    ADMINS_EMPRESAS = json.loads(
        (Path(__file__).resolve().parents[2] / "config" / "admins_config.json").read_text(encoding="utf-8")
    )
except FileNotFoundError:
    ADMINS_EMPRESAS = {}
except json.JSONDecodeError:
    ADMINS_EMPRESAS = {}

DATA_DIR = Path(__file__).resolve().parents[2] / "data"
LEADS_FILE = DATA_DIR / "clinica_fisio_leads.jsonl"

VALOR_PADRAO_LINK = 120.0

# ---------------------------------------------------------------------------
# Mensagens fixas utilizadas no prot√≥tipo
# ---------------------------------------------------------------------------
MENU_PRINCIPAL = (
    "ü§ñ *Est√∫dio Movimenta Pilates*\n"
    "Como posso te ajudar hoje?\n\n"
    "1Ô∏è‚É£ Comercial ‚Äì planos e diferenciais\n"
    "2Ô∏è‚É£ Agendar/Remarcar uma aula\n"
    "3Ô∏è‚É£ Pagamentos ‚Äì link r√°pido\n"
    "4Ô∏è‚É£ D√∫vidas frequentes\n\n"
    "Voc√™ pode digitar *menu* a qualquer momento para voltar para c√°."
)

MENSAGEM_COMERCIAL = (
    "‚ú® *Sobre o nosso est√∫dio*\n"
    "‚Ä¢ Aulas personalizadas com fisioterapeutas especializados em Pilates cl√≠nico.\n"
    "‚Ä¢ Planos individuais, duplas e trio, com avalia√ß√µes peri√≥dicas inclu√≠das.\n"
    "‚Ä¢ Ambiente climatizado, equipamentos modernos e vagas de estacionamento.\n\n"
    "Posso te ajudar com uma proposta ou simula√ß√£o de plano?"
)

MENSAGEM_PAGAMENTO = (
    "üí≥ *Pagamento online*\n"
    "Para facilitar, usamos links de pagamento seguros.\n"
    "Envie *quero pagar* com o valor ou pacote desejado e encaminharemos o link em instantes.\n\n"
    "Se preferir, voc√™ pode falar direto com a recep√ß√£o digitando *atendente*."
)

MENSAGEM_FAQ = (
    "‚ùì *D√∫vidas comuns*\n"
    "‚Ä¢ Precisamos de roupa confort√°vel e meia antiderrapante.\n"
    "‚Ä¢ As aulas duram 55 minutos e podem ser individuais ou em grupos reduzidos.\n"
    "‚Ä¢ Trabalhamos com reembolso para v√°rios conv√™nios (via recibo).\n"
    "‚Ä¢ H√° estacionamento conveniado em frente ao est√∫dio.\n\n"
    "Ficou com outra d√∫vida? Digite e respondemos por aqui!"
)

# ---------------------------------------------------------------------------
# Estado do fluxo
# ---------------------------------------------------------------------------


@dataclass
class EstadoConversa:
    etapa: str = "menu"
    contexto: Dict[str, str] = field(default_factory=dict)


# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------


def _reset_estado(fluxo_usuario: Dict[str, dict], chat_id: str) -> EstadoConversa:
    fluxo_usuario[chat_id] = {"etapa": "menu", "contexto": {}}
    return EstadoConversa()


def _obter_estado(fluxo_usuario: Dict[str, dict], chat_id: str) -> EstadoConversa:
    estado_bruto = fluxo_usuario.setdefault(chat_id, {"etapa": "menu", "contexto": {}})
    return EstadoConversa(
        etapa=estado_bruto.get("etapa", "menu"),
        contexto=dict(estado_bruto.get("contexto") or {}),
    )


def _salvar_estado(fluxo_usuario: Dict[str, dict], chat_id: str, estado: EstadoConversa) -> None:
    fluxo_usuario[chat_id] = {"etapa": estado.etapa, "contexto": estado.contexto}


def _normalizar(msg: str) -> str:
    return (msg or "").strip().lower()


# ---------------------------------------------------------------------------
# Processadores de cada etapa
# ---------------------------------------------------------------------------


def _handle_menu(waha, chat_id: str) -> None:
    waha.send_message(chat_id, MENU_PRINCIPAL)


def _entrar_agendamento(waha, chat_id: str, estado: EstadoConversa) -> None:
    estado.etapa = "agendamento_nome"
    estado.contexto = {}
    waha.send_message(
        chat_id,
        "√ìtimo! Para reservar um hor√°rio, me conta primeiro o seu *nome completo*."
    )


def _continuar_agendamento(
    waha,
    chat_id: str,
    estado: EstadoConversa,
    mensagem: str,
    empresa: str,
) -> None:
    if estado.etapa == "agendamento_nome":
        estado.contexto["nome"] = mensagem.strip()
        estado.etapa = "agendamento_preferencia"
        waha.send_message(
            chat_id,
            (
                "Perfeito, {nome}! Qual dia/hor√°rio voc√™ prefere?\n"
                "Ex.: ter√ßa-feira √† tarde ou 12/09 √†s 8h."
            ).format(nome=estado.contexto["nome"])
        )
        return

    if estado.etapa == "agendamento_preferencia":
        estado.contexto["preferencia"] = mensagem.strip()
        estado.etapa = "agendamento_observacoes"
        waha.send_message(
            chat_id,
            "Quer deixar alguma observa√ß√£o (les√£o, objetivo, conv√™nio)? Se n√£o precisar, digite *n√£o*."
        )
        return

    if estado.etapa == "agendamento_observacoes":
        observacao = mensagem.strip()
        if observacao.lower() in {"nao", "n√£o", "nenhuma", "nada"}:
            observacao = "Sem observa√ß√µes adicionais."
        estado.contexto["observacoes"] = observacao

        waha.send_message(
            chat_id,
            (
                "Obrigada! Recebemos o pedido com as informa√ß√µes:\n"
                "‚Ä¢ Nome: {nome}\n"
                "‚Ä¢ Prefer√™ncia: {pref}\n"
                "‚Ä¢ Observa√ß√µes: {obs}\n\n"
                "Nossa equipe confirma a disponibilidade e retorna por aqui em instantes."
            ).format(
                nome=estado.contexto.get("nome", "-"),
                pref=estado.contexto.get("preferencia", "-"),
                obs=estado.contexto.get("observacoes", "Sem observa√ß√µes."),
            )
        )

        resumo_admin = (
            "üóìÔ∏è *Novo pedido de agendamento*\n"
            f"‚Ä¢ Nome: {estado.contexto.get('nome', '-')}\n"
            f"‚Ä¢ Prefer√™ncia: {estado.contexto.get('preferencia', '-')}\n"
            f"‚Ä¢ Observa√ß√µes: {estado.contexto.get('observacoes', 'Sem observa√ß√µes.')}\n"
            f"‚Ä¢ Recebido em: {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        )
        _registrar_lead(empresa, dict(estado.contexto))
        _notificar_time(waha, empresa, resumo_admin)

        estado.etapa = "menu"
        estado.contexto = {}
        waha.send_message(chat_id, "Se precisar de mais algo, √© s√≥ digitar *menu* para recome√ßar. üòä")
        return


def _responder_pagamentos(waha, chat_id: str, empresa: str) -> None:
    mensagem = MENSAGEM_PAGAMENTO
    cfg = CONFIG_EMPRESAS.get(empresa, {})
    instrucoes = cfg.get("pagamento_instrucoes")
    if instrucoes:
        mensagem = f"{mensagem}\n\nüìå {instrucoes}"
    waha.send_message(chat_id, mensagem)


def _gerar_link_pagamento(mensagem: str, empresa: str) -> str:
    texto = mensagem.lower().replace("r$", "").strip()
    numeros = re.findall(r"\d+[\.,]?\d*", texto)
    valor = None
    for bruto in numeros:
        normalizado = bruto.replace(".", "").replace(",", ".")
        try:
            candidato = float(normalizado)
        except ValueError:
            continue
        if candidato > 0:
            valor = candidato
            break

    if valor is None:
        valor = VALOR_PADRAO_LINK

    base = CONFIG_EMPRESAS.get(empresa, {}).get(
        "pagamento_link_base",
        "https://pagamentos.movimenta.exemplo/checkout",
    )
    token = uuid4().hex[:10]
    link = f"{base}?empresa={empresa}&token={token}&valor={valor:.2f}"

    return (
        "‚úÖ Aqui est√° o seu link de pagamento seguro:\n"
        f"{link}\n\n"
        "Depois de concluir, nos avise por aqui para confirmarmos a aula!"
    )


def _responder_faq(waha, chat_id: str) -> None:
    waha.send_message(chat_id, MENSAGEM_FAQ)


def _registrar_lead(empresa: str, dados: Dict[str, str]) -> None:
    try:
        DATA_DIR.mkdir(exist_ok=True)
        payload = {
            "empresa": empresa,
            "capturado_em": datetime.utcnow().isoformat(),
            "dados": dados,
        }
        with LEADS_FILE.open("a", encoding="utf-8") as fp:
            fp.write(json.dumps(payload, ensure_ascii=False) + "\n")
    except Exception as exc:  # pragma: no cover - falhas n√£o devem quebrar o fluxo
        print(f"[clinica_fisio] Falha ao registrar lead: {exc}")


def _notificar_time(waha, empresa: str, mensagem: str) -> None:
    for admin in ADMINS_EMPRESAS.get(empresa, []) or []:
        try:
            waha.send_message(admin, mensagem)
        except Exception as exc:  # pragma: no cover - n√£o deve interromper
            print(f"[clinica_fisio] Falha ao notificar admin {admin}: {exc}")


# ---------------------------------------------------------------------------
# Fun√ß√£o principal chamada pelo app
# ---------------------------------------------------------------------------


def processar(chat_id: str, msg: str, empresa: str, waha, fluxo_usuario: Dict[str, dict]):
    """Roteia a mensagem para o fluxo do prot√≥tipo."""
    if not msg:
        return jsonify({"status": "ignored"}), 200

    texto = _normalizar(msg)
    estado = _obter_estado(fluxo_usuario, chat_id)

    # Comandos universais
    if texto in {"menu", "inicio", "in√≠cio", "oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite"}:
        estado.etapa = "menu"
        estado.contexto = {}
        _salvar_estado(fluxo_usuario, chat_id, estado)
        _handle_menu(waha, chat_id)
        return jsonify({"status": "success"}), 200

    if texto in {"cancelar", "sair"}:
        _reset_estado(fluxo_usuario, chat_id)
        waha.send_message(chat_id, "Tudo bem! Quando quiser retomar, √© s√≥ digitar *menu*.")
        return jsonify({"status": "success"}), 200

    if texto in {"atendente", "falar com atendente", "humano"}:
        waha.send_message(
            chat_id,
            "üìû J√° vou acionar a recep√ß√£o para continuar o atendimento com voc√™."
        )
        return jsonify({"status": "success"}), 200

    # Fluxo principal
    if texto.startswith("quero pagar"):
        link = _gerar_link_pagamento(msg, empresa)
        waha.send_message(chat_id, link)
        _salvar_estado(fluxo_usuario, chat_id, estado)
        return jsonify({"status": "success"}), 200

    if estado.etapa.startswith("agendamento"):
        _continuar_agendamento(waha, chat_id, estado, msg, empresa)
        _salvar_estado(fluxo_usuario, chat_id, estado)
        return jsonify({"status": "success"}), 200

    if texto in {"1", "01", "comercial"}:
        _salvar_estado(fluxo_usuario, chat_id, estado)
        waha.send_message(chat_id, MENSAGEM_COMERCIAL)
        return jsonify({"status": "success"}), 200

    if texto in {"2", "02", "agendamento", "agendar", "remarcar", "remarca√ß√£o", "confirmar"}:
        _entrar_agendamento(waha, chat_id, estado)
        _salvar_estado(fluxo_usuario, chat_id, estado)
        return jsonify({"status": "success"}), 200

    if texto in {"3", "03", "pagamento", "pagamentos", "link"}:
        _responder_pagamentos(waha, chat_id, empresa)
        _salvar_estado(fluxo_usuario, chat_id, estado)
        return jsonify({"status": "success"}), 200

    if texto in {"4", "04", "duvida", "d√∫vida", "duvidas", "d√∫vidas", "faq"}:
        _responder_faq(waha, chat_id)
        _salvar_estado(fluxo_usuario, chat_id, estado)
        return jsonify({"status": "success"}), 200

    # Se nada se encaixar e estivermos no menu, apresenta novamente
    if estado.etapa == "menu":
        _salvar_estado(fluxo_usuario, chat_id, estado)
        waha.send_message(
            chat_id,
            "N√£o entendi muito bem. Use um dos n√∫meros do menu ou digite *menu* para recome√ßar."
        )
        _handle_menu(waha, chat_id)
        return jsonify({"status": "success"}), 200

    # Fallback gen√©rico
    waha.send_message(
        chat_id,
        "Certo! Estou encaminhando para a nossa equipe finalizar esse atendimento."
    )
    return jsonify({"status": "success"}), 200